Chapter 16. “Who Did You Pass On The Road? Nobody”: Lojban And Logic  
---  
Prev: Section 16.9 |  Next: Section 16.11  
---|---  
Table of Contents
Book Info Page
* * *
## 16.10. bridi negation and logical connectives
A complete discussion of logical connectives appears in Chapter 14. What is said here is intentionally quite incomplete and makes several oversimplifications.
A logical connective is a cmavo or compound cmavo. In this chapter, we will make use of the logical connectives “and” and “or” (where “or” really means “and/or”, “either or both”). The following simplified recipes explain how to make some logical connectives:
  * To logically connect two Lojban sumti with “and”, put them both in the bridi and separate them with the cmavo __e__.
  * To logically connect two Lojban bridi with “and”, replace the regular separator cmavo __i__ with the compound cmavo __.ije__.
  * To logically connect two Lojban sumti with “or”, put them both in the bridi and separate them with the cmavo __a__.
  * To logically connect two Lojban bridi with “or”, replace the regular separator cmavo __i__ with the compound cmavo __.ija__.


More complex logical connectives also exist; in particular, one may place __na__ before __e__ or __a__ , or between __i__ and __je__ or __ja__ ; likewise, one may place __nai__ at the end of a connective. Both __na__ and __nai__ have negative effects on the sumti or bridi being connected. Specifically, __na__ negates the first or left-hand sumti or bridi, and __nai__ negates the second or right-hand one.
Whenever a logical connective occurs in a sentence, that sentence can be expanded into two sentences by repeating the common terms and joining the sentences by a logical connective beginning with __i__. Thus the following sentence:
**Example 16.73. **
mi | .e | do | klama | ti  
---|---|---|---|---  
I | and | you | come-to | this-here  
I and you come here.  
---  
  

can be expanded to:
**Example 16.74. **
mi | klama | ti | .ije | do | klama | ti  
---|---|---|---|---|---|---  
I | come-to | this-here | and | you | come-to | this-here  
I come here, and, you come here.  
---  
  

The same type of expansion can be performed for any logical connective, with any valid combination of __na__ or __nai__ attached. No change in meaning occurs under such a transformation.
Clearly, if we know what negation means in the expanded sentence forms, then we know what it means in all of the other forms. But what does negation mean between sentences?
The mystery is easily solved. A negation in a logical expression is identical to the corresponding bridi negation, with the negator placed at the beginning of the prenex. Thus:
**Example 16.75. **
mi | .enai | do | prami | roda  
---|---|---|---|---  
I | and-not | you | love | everything  
I, and not you, love everything.  
---  
  

expands to:
**Example 16.76. **
mi | prami | roda | .ijenai | do | prami | roda  
---|---|---|---|---|---|---  
I | love | everything, | and-not, | you | love | everything.  
  

and then into prenex form as:
**Example 16.77. **
roda | zo'u | mi | prami | da | .ije  
---|---|---|---|---|---  
For-each-thing | : | I | love | it, | and  
naku | zo'u | do | prami | da  
---|---|---|---|---  
it-is-false-that | : | you | love | (the-same)-it.  
For each thing: I love it, and it is false that you love (the same) it.  
---  
  

By the rules of predicate logic, the __ro__ quantifier on __da__ has scope over both sentences. That is, once you've picked a value for __da__ for the first sentence, it stays the same for both sentences. (The __da__ continues with the same fixed value until a new paragraph or a new prenex resets the meaning.)
Thus the following example has the indicated translation:
**Example 16.78. **
su'oda | zo'u | mi | prami | da  
---|---|---|---|---  
For-at-least-one-thing | : | I | love | that-thing.  
.ije | naku | zo'u | do | prami | da  
---|---|---|---|---|---  
And | it-is-false-that | : | you | love | that-(same)-thing.  
There is something that I love that you don't.  
---  
  

If you remember only two rules for prenex manipulation of negations, you won't go wrong:
  * Within a prenex, whenever you move _naku_ past a bound variable (da, de, di, etc.), you must invert the quantifier.
  * A __na__ before the selbri is always transformed into a _naku_ at the left-hand end of the prenex, and vice versa.


* * *
Chapter 16. “Who Did You Pass On The Road? Nobody”: Lojban And Logic  
---  
Prev: Section 16.9 |  Next: Section 16.11  
---|---  
Table of Contents
Book Info Page
